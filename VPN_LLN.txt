import os
import string
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –§—Ä–∞–∑—ã –ø—Ä–æ—â–∞–Ω–∏—è
FAREWELL_PHRASES = [
    "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞! üòä",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ LKN VPN!",
    "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üöÄ",
    "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!",
    "–ë—É–¥—å—Ç–µ –Ω–∞ —Å–≤—è–∑–∏! üì°",
    "VPN —Å –ª—é–±–æ–≤—å—é –æ—Ç LKN üíô",
]

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN"),
    KeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN"),
)
main_menu.add(
    KeyboardButton("–°–±–æ—Ä ip, –ª–æ–≥–æ–≤"),
    KeyboardButton("–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"),
)
main_menu.add(
    KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"),
    KeyboardButton("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –†–§ —Å–µ—Ä–≤–µ—Ä"),
)

device_menu = ReplyKeyboardMarkup(resize_keyboard=True)
device_menu.add("Android", "MacOS", "Windows", "IOS")

server_menu = ReplyKeyboardMarkup(resize_keyboard=True)
server_menu.add("–†–æ—Å—Å–∏—è üá∑üá∫", "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±")

countries_list = ["–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–°–®–ê", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–ë–µ–ª–∞—Ä—É—Å—å", "–ù–µ—Ç –º–æ–µ–π —Å—Ç—Ä–∞–Ω—ã"]
countries_menu = ReplyKeyboardMarkup(resize_keyboard=True)
countries_menu.add(*countries_list)

resolve_menu = ReplyKeyboardMarkup(resize_keyboard=True)
resolve_menu.add("–†–µ—à–µ–Ω–æ", "–ù–µ —Ä–µ—à–µ–Ω–æ")

contact_manager_kb = ReplyKeyboardMarkup(resize_keyboard=True)
contact_manager_kb.add("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ó–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: –∫–æ–¥ -> –¥–∞–Ω–Ω—ã–µ
tickets = {}

WELCOME_TEXT = (
    "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É LKN VPN!\n\n"
    "–Ø —Ä–µ—à–∞—é —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ 60 —Å–µ–∫—É–Ω–¥:\n"
    "‚Ä¢ –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
    "‚Ä¢ –ù–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n"
    "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n"
    "üìå –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É! –ü—Ä–∏–º–µ—Ä—ã:\n"
    "\"–ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ VPN\"\n"
    "\"–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ iOS?\"\n"
    "\"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤\"\n\n"
    "‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥–∞—é –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
    "‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: 2 –º–∏–Ω—É—Ç—ã\n"
    "üõ° –í–∞—à –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN - LKN!"
)

def generate_ticket_code(length=6):
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_states[message.from_user.id] = {}
    await message.answer(WELCOME_TEXT, reply_markup=main_menu)

@dp.message_handler()
async def main_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    state = user_states.get(user_id, {})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    if state.get('awaiting_rating'):
        if text in ['1','2','3','4','5']:
            rating = int(text)
            user_states[user_id]['awaiting_rating'] = False
            if rating < 2:
                await message.answer("–ß—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.", reply_markup=None)
                user_states[user_id]['awaiting_problem'] = True
            else:
                phrase = random.choice(FAREWELL_PHRASES)
                await message.answer(phrase, reply_markup=main_menu)
            return
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –ø–ª–æ—Ö–æ–π –æ—Ü–µ–Ω–∫–∏
    if state.get('awaiting_problem'):
        user_states[user_id]['awaiting_problem'] = False
        phrase = random.choice(FAREWELL_PHRASES)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. " + phrase, reply_markup=main_menu)
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN":
        user_states[user_id]['step'] = 'choose_device'
        await message.answer("–ö–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?", reply_markup=device_menu)
        return

    if text == "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN":
        user_states[user_id]['step'] = 'choose_server'
        await message.answer("–ö–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?", reply_markup=server_menu)
        return

    if text == "–°–±–æ—Ä ip, –ª–æ–≥–æ–≤":
        await message.answer("–í–ü–ù –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.")
        await ask_rating(message)
        return

    if text == "–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞":
        await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ –æ–∫—Ç—è–±—Ä–µ-–Ω–æ—è–±—Ä–µ 2025 –≥–æ–¥–∞.")
        await ask_rating(message)
        return

    if text == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏":
        user_states[user_id]['step'] = 'ideas'
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∏, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.")
        return

    if text == "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –†–§ —Å–µ—Ä–≤–µ—Ä":
        await message.answer("–†–ö–ù –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞, —Ç–µ–º —Å–∞–º—ã–º –¥–µ–ª–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä YouTube.")
        await ask_rating(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if state.get('step') == 'choose_device':
        if text in ["Android", "MacOS", "IOS"]:
            await message.answer(
                "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –í–ü–ù:\n"
                "1) –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ –±–æ—Ç–µ.\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n\n"
                "1) –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2RayTun.\n"
                "2) –í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                "3) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ + –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
                "4) –í –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ '–†—É—á–Ω–æ–π –≤–≤–æ–¥'.\n"
                "5) –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.\n"
                "6) –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                "7) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–∫–ª—é—á–∏—Ç—å'.\n\n"
                "–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ.",
                reply_markup=resolve_menu
            )
            user_states[user_id]['step'] = 'awaiting_resolve'
            return
        elif text == "Windows":
            await message.answer(
                "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –í–ü–ù:\n"
                "1) –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤ –±–æ—Ç–µ.\n"
                "2) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á.\n\n"
                "1) –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ hiddify.\n"
                "2) –í–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                "3) –ù–∞–∂–º–∏—Ç–µ –Ω–∞ + –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
                "4) –í –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ '–†—É—á–Ω–æ–π –≤–≤–æ–¥'.\n"
                "5) –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.\n"
                "6) –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                "7) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í–∫–ª—é—á–∏—Ç—å'.\n\n"
                "–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ.",
                reply_markup=resolve_menu
            )
            user_states[user_id]['step'] = 'awaiting_resolve'
            return
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=device_menu)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if state.get('step') == 'choose_server':
        if text in ["–†–æ—Å—Å–∏—è üá∑üá∫", "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±"]:
            user_states[user_id]['chosen_server'] = text
            user_states[user_id]['step'] = 'choose_country'
            await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=countries_menu)
            return
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=server_menu)
            return

    if state.get('step') == 'choose_country':
        chosen_server = user_states[user_id].get('chosen_server')
        if text not in countries_list:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ '–ù–µ—Ç –º–æ–µ–π —Å—Ç—Ä–∞–Ω—ã'.", reply_markup=countries_menu)
            return

        if chosen_server == "–†–æ—Å—Å–∏—è üá∑üá∫" and text == "–£–∫—Ä–∞–∏–Ω–∞":
            await message.answer(
                "–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∑–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç IP –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n"
                "–°–æ–≤–µ—Ç—É–µ–º –≤—ã–±—Ä–∞—Ç—å –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±.",
                reply_markup=resolve_menu
            )
        else:
            await message.answer(
                "1) –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
                "2) –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
                "3) –í–∫–ª—é—á–∏—Ç–µ –∞–≤–∏–∞—Ä–µ–∂–∏–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –∏ –≤—ã–∫–ª—é—á–∏—Ç–µ –µ–≥–æ.\n"
                "4) –í—ã–∫–ª—é—á–∏—Ç–µ –í–ü–ù.\n"
                "5) –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
                "6) –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ!\n\n"
                "–í–ê–ñ–ù–û! –ï—Å–ª–∏ —É –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Windows, —Å–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫:\n"
                "–†—è–¥–æ–º —Å + –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ VPN –≤–º–µ—Å—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π.",
                reply_markup=resolve_menu
            )
        user_states[user_id]['step'] = 'awaiting_resolve'
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –†–µ—à–µ–Ω–æ / –ù–µ —Ä–µ—à–µ–Ω–æ
    if state.get('step') == 'awaiting_resolve':
        if text == "–†–µ—à–µ–Ω–æ":
            user_states[user_id]['awaiting_rating'] = True
            user_states[user_id]['step'] = None
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5.", reply_markup=None)
            return
        elif text == "–ù–µ —Ä–µ—à–µ–Ω–æ":
            user_states[user_id]['step'] = 'contact_manager'
            await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ.", reply_markup=None)
            return
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–†–µ—à–µ–Ω–æ' –∏–ª–∏ '–ù–µ —Ä–µ—à–µ–Ω–æ'.", reply_markup=resolve_menu)
            return

    # –ü—Ä–∏—ë–º –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if state.get('step') == 'contact_manager':
        problem_text = text
        ticket_code = generate_ticket_code()
        tickets[ticket_code] = {
            "user_id": user_id,
            "problem": problem_text,
            "status": "new"
        }
        user_states[user_id]['step'] = None
        user_states[user_id]['awaiting_rating'] = True
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è: {ticket_code}\n"
            "–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5."
        )
        # –ó–¥–µ—Å—å –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –∏–ª–∏ –º–µ—Ç–æ–¥)
        # –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã ‚Äî –¥–æ–±–∞–≤—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏–¥–µ–π)
    if state.get('step') == 'ideas':
        user_states[user_id]['step'] = None
        user_states[user_id]['awaiting_rating'] = True
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–¥–µ—é! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 5.")
        return

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu)

async def ask_rating(message: types.Message):
    user_states[message.from_user.id]['awaiting_rating'] = True
    await message.answer("–ö–∞–∫ –≤–∞–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ? –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç 1 –¥–æ 5.", reply_markup=None)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫–æ–¥—É
@dp.message_handler(commands=['answer'])
async def answer_handler(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /answer <–∫–æ–¥> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    code = args[1]
    answer_text = args[2]
    ticket = tickets.get(code)
    if not ticket:
        await message.answer("–ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id = ticket["user_id"]
    await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n{answer_text}")
    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–†–µ—à–µ–Ω–æ' –∏–ª–∏ '–ù–µ —Ä–µ—à–µ–Ω–æ'.", reply_markup=resolve_menu)
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

if __name__ == "__main__":
    executor.start_polling(dp)
